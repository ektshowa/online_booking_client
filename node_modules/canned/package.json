{
  "name": "canned",
  "version": "0.3.7",
  "description": "serve canned responses to mock an api, based on files in a folder",
  "main": "canned.js",
  "scripts": {
    "test": "make test",
    "start": "./bin/canned"
  },
  "bin": {
    "canned": "./bin/canned"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sideshowcoder/canned"
  },
  "dependencies": {
    "lodash": "^3.10.1",
    "optimist": "^0.6.0"
  },
  "devDependencies": {
    "jasmine-node": "^1.14.2",
    "jshint": "^2.7.0",
    "node-dev": "^2.6.1"
  },
  "engines": {
    "node": ">=0.10.3"
  },
  "keywords": [
    "mock",
    "api",
    "server"
  ],
  "author": {
    "name": "Philipp Fehre @sideshowcoder"
  },
  "license": "MIT",
  "readme": "Canned fake API server\n======================\n\n[![Build Status](https://travis-ci.org/sideshowcoder/canned.png?branch=master)](https://travis-ci.org/sideshowcoder/canned) [![Code Climate](https://codeclimate.com/github/sideshowcoder/canned.png)](https://codeclimate.com/github/sideshowcoder/canned) [![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/sideshowcoder/canned/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n\nView the docs on [Docs](http://sideshowcoder.github.io/canned)\n\nWorking with APIs, more often than not, during development you want to work\nwith a fixed version of the responses provided. This is especially true if the\nAPI is still under development, and maybe even still needs input on how to\noutput something. This is what Canned is for!\n\nWhat does it do?\n----------------\nCanned maps a folder structure to API responses. Given the following directory structure:\n\n    /content/index.get.html\n    /comment/any.get.json\n    /comment/1/votes/index.get.json\n    /comment/any/votes/index.get.json\n\nrequests like\n\n    GET /comment/:id\n\nare served from the file `/comment/any.get.json` as\n\n    Content-Type: application/json\n    { \"content\": \"I am a comment\", \"author\": \"sideshowcoder\" }\n\nrequests like\n\n    GET /content/\n\nare served from the file `/content/index.get.html` as\n\n    Content-Type: text/html\n    <html>\n      <body>Some html in here</body>\n    </html>\n\n\nrequests like\n\n    GET /comment/1/votes\n\nare served from the file `/comment/1/index.get.json` as\n\n    Content-Type: application/json\n    { \"content\": \"I am comment 1\", \"author\": \"sideshowcoder\" }\n\nrequests like\n\n    GET /comment/123456789/votes\n\nare served from the file `/comment/any/index.get.json`\n\n    Content-Type: application/json\n    { \"content\": \"I am a wildcard comment for any id\", \"author\": \"sideshowcoder\" }\n\n\n\nAwesome! so what is supported?\n------------------------------\nCurrently Canned supports the basic REST-API mapping, as well as custom method\nmapping with nested endpoints.\n\n    file                            | resquest\n    /index.get.json                 | GET /\n    /any.get.json                   | GET /:id\n    /_search.get.json               | GET /search\n    /comments/index.get.json        | GET /comments/\n    /comments/any.get.json          | GET /comments/:id\n    /comments/_search.get.json      | GET /comments/search\n    /comments/any/index.get.json    | GET /comments/:id/\n\nYou can even add query parameters to your filenames to return different\nresponses on the same route. If the all query params in a filename match the\nincoming request, this file will be returned. It will fall back to returning the\nfile with no query params if it exists.\n\n*Warning this will be deprecated in the future since canned now supports\nmultiple response based on the request body or GET URL parameters in one file.\nThis is the prefered way since files with ? in the name do not work on Windows*\n\n    file                            | resquest\n    /index?name=Superman.get.json   | GET /?name=Superman&NotAllParams=NeedToMatch\n    /_search?q=hello.get.json       | GET /comments/search?q=hello\n    /_search.get.json               | GET /comments/search?iam=soignored\n\nSame support is available for PUT, POST, etc.\n\n    /index.post.json            | POST serves /... + CORS Headers\n    /index.put.json             | PUT serves /... + CORS Headers\n\nIf CORS support is enabled additionally options will be available as a http verb\nand all requests will serve the CORS Headers as well\n\n    /                           | OPTIONS serve all the options needed for CORS\n    /index.get.json             | GET serves /... + CORS Headers\n\nIf you need some custum return codes, just add them to the file via adding a\nfile header like so\n\n    //! statusCode: 201\n    <html>\n      <body>Created something successfully! Happy!</body>\n    </html>\n\nThe header will be stripped before sending and the statusCode will be set.\n\nYou can also override the default content types by adding a custom content type to the file header:\n\n    //! contentType: \"application/vnd.custom+xml\"\n    <xml>\n        <created>1</created>\n    </xml>\n\nThis will be returned with a `Content-type: application/vnd.custom+xml` header.\n\nMultiple headers need to be written on one single line and comma-separated, like so:\n\n    //! statusCode: 201, contentType: \"application/vnd.custom+xml\"\n\nIf you need to send bind custom HTTP headers to the response you can add them as a JSON object in the\n`customHeaders` attributes:\n\n    //! customHeaders: [{\"MyCustomHeaderName\": \"MyCustomHeaderValue\"}, {\"SecondHeaderName\": \"SecondHeaderValue\"}]\n\nVariable responses\n------------------\nYou can get a different response by specifying request data in variant\ncomments. If the request data matches the comment data the matching response is\nreturned. If there is no match the first response is returned\n\n*Note: comments must be on a single line*\n\nCustom headers:\n\n    //! header: {\"authorization\": \"abc\"}\n    {\n        \"response\": \"response for abc\"\n    }\n\n    //! header: {\"authorization\": \"123\"}\n    {\n        \"response\": \"response for 123\"\n    }\n\nIf you need different responses based on request body then you can specify the\nrequest you want matched via body comments:\n\n    //! body: {\"email\": \"one@example.com\"}\n    {\n        \"response\": \"response for one@example.com\"\n    }\n\n    //! body: {\"email\": \"two@example.com\"}\n    {\n        \"response\": \"response for two@example.com\"\n    }\n\nIf you need different responses based on request parameters then you can specify\nthem via parameters comments:\n\n    //! params: {\"foo\": \"bar\"}\n    {\n        \"response\": \"response for bar\"\n    }\n\n    //! params: {\"foo\": \"baz\"}\n    {\n        \"response\": \"response for baz\"\n    }\n\nthis would match `http://my.local.server/my_get_request_path?foo=bar` or\n`http://my.local.server/my_get_request_path?foo=baz` respectively.\n\nTo use in conjunction with response headers and status codes, just add them on\nthe line above.\n\n\t//! statusCode: 201\n\t//! header: {\"authorization\": \"abc\"}\n\t{\n\t    \"response\": \"response for abc\"\n\t}\n\n  \t//! statusCode: 201, contentType: \"application/my-personal-json\"\n\t//! header: {\"authorization\": \"123\"}\n\t{\n\t    \"response\": \"response for 123\"\n\t}\n\nWildcard responses are also supported, very useful to have 'wildcard'\ndirectories, so that if for given a request like:\n\n  GET /api/users/1/profile/\n\nyou don't have a file in `./canned/api/users/1/profile/index.get.json` then\nit would look for a file in `./canned/api/users/any/index.get.json` or\nsimilar. Wildcards can be specified on the command line via\n\n  canned --wildcard iamawildcard\n\n\nHow about some docs inside for the responses?\n---------------------------------------------\nMost content types support comments natively, like html or javascript. Sadly the\nprobably most used type (JSON) does not :(. So canned actually extends the JSON\nsyntax a little so it can include comments with _//_ or _/**/_. In case you use\nthe JSON files directly on the backend side as test cases make sure you strip\nthose out as well!\n\n\nOk I need this!\n---------------\nJust install via npm\n\n    $ npm install canned\n\nwhich will install it locally in node\\_modules, if you want to have it\navailable from anywhere just install globally\n\n    $ npm install -g canned\n\nHow do I use it\n---------------\nThere are 2 ways here, either you embed it somewhere programmatically\n\n    var canned = require('canned')\n    ,   http = require('http')\n    ,   opts = { cors: true, logger: process.stdout }\n\n    can = canned('/path/to/canned/response/folder', opts)\n\n    http.createServer(can).listen(3000)\n\nOr just run the provided canned server script\n\n    $ canned\n\nWhich serves the current folder with canned responses on port 3000\n\n    $ canned -p 5000 ./my/responses/\n\nwill serve the relative folder via port 5000\n\nIf for whatever reason you want to turn of CORS support do so via\n\n    $ canned --cors=false ./my/responses/\n\nAlso if you need additional headers to be served alongside the CORS headers\nthese can be added like this (thanks to runemadsen)\n\n    $ canned --headers \"Authorization, Another-Header\"\n\nFor more information checkout [the pull request](https://github.com/sideshowcoder/canned/pull/9)\n\nAlready using grunt? [Great there is a plugin for that,](https://github.com/jkjustjoshing/grunt-canned)\nthanks to jkjustjoshing.\n\n\nIt does not work :(\n-------------------\n\n### canned not found\nmake sure you either install globally or put ./node\\_modules/.bin in your PATH\n\n### it is still not found, and I installed globally\nmake sure /usr/local/share/npm/bin is in your path, this should be true for\nevery install since you won't be able to run any global module bins if not.\n(like express, and such)\n\n### the encoding looks wrong\nmake sure you run a version of node which is 0.10.3 or higher, because it fixes\na problem for the encoding handling when reading files\n\nHow to Contribute\n-----------------\n* Checkout the repository\n* Run the tests and jshint\n    ```$ make```\n* Create a topic branch\n    ```$ git checkout -b my-new-feature```\n* Code test and make jshint happy!\n    ```$ make test```\n    ```$ make hint```\n* Push the branch and create a Pull-Request\n\nI try to review the pull requests as quickly as possible, should it take to long\nfeel free to [bug me on twitter](https://twitter.com/ischi)\n\nRelease History\n---------------\n### next\n\n### 0.3.7\n* The regex for matching request, was not considering arrays in the request JSON\n  #82\n* For request with a request body, canned was checking content type to exactly\n  match application/json, which is not good as browsers may sent charset as well\n  with the content type. #82\n* For matching request and filters with more accuracy, we were converting the\n  values of all keys in request to string before comparing, but this was being\n  done wrong as it was creating string of Objects and arrays as well, which it\n  shouldn’t #82\n\n### 0.3.6\n* support checking the `ACCEPT HEADER` for the response type (thanks git-jiby-me) #81\n\n### 0.3.5\n* support for custom HTTP headers in responses\n* fix for matching multiple paramters in response #73 thanks\n  [xdemocle](https://github.com/xdemocle)\n* fix any wildcard in the middle of the path #66 thanks\n  [msurdi](https://github.com/msurdi)\n\n### 0.3.4\n* update depedencies and dev-dependencies\n* wildcard parameters thanks to [msurdi](https://github.com/msurdi) see\n  https://github.com/sideshowcoder/canned/pull/64\n\n### 0.3.3\n* fix support for special characters in the header / params / body matches\n  (@simonprickett, @kevinschumacher, @sideshowcoder)\n* support differet statusCodes and content types in multiple response files\n  (@sideshowcoder)\n\n### 0.3.2\n* support for XML headers to support SOAP (@vikalp)\n* fix relative path again... (@sideshowcoder)\n\n### 0.3.1\n* fixes for variable responses with JSON body (@bibounde)\n* fixes for relative paths on start (@sideshowcoder)\n* complex get parameters causing regexp match on file to fail (@sideshowcoder)\n\n### 0.3\n* support for multiple responses per file (@hungrydavid)\n* support for GET responses without the need for special characters in the\n  filename (@sideshowcoder based on the work by @hungrydavid)\n\n### 0.2.3\n* added support for empty response with 204 for no content (@jkjustjoshing)\n\n### everything before\n* sorry haven't kept a version history, yet. Will now!\n\nContributors\n------------\n* [sideshowcoder](https://github.com/sideshowcoder)\n* [leifg](https://github.com/leifg)\n* [runemadsen](https://github.com/runemadsen)\n* [mulderp](https://github.com/mulderp)\n* [creynders](https://github.com/creynders)\n* [jkjustjoshing](https://github.com/jkjustjoshing)\n* [hungrydavid](https://github.com/hungrydavid)\n* [bibounde](https://github.com/bibounde)\n* [vikalp](https://github.com/vikalp)\n* [simonprickett](https://github.com/simonprickett)\n* [kevinschumacher](https://github.com/kevinschumacher)\n* [msurdi](https://github.com/msurdi)\n* [Brendan Rius](https://github.com/brendan-rius)\n* [Rocco Russo](https://github.com/xdemocle)\n* [git-jiby-me](https://github.com/git-jiby-me)\n\nLicense\n-------\nMIT 2013 Philipp Fehre alias @sideshowcoder, or @ischi on twitter\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sideshowcoder/canned/issues"
  },
  "_id": "canned@0.3.7",
  "_from": "canned@"
}
